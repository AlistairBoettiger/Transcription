
%%                                   multiloop_full.m

% Alistair Boettiger                                   Date Begun: 10/12/10
% Levine Lab                                        Last Modified: 10/12/10

% Description: 
% 

clear all;
 load compfull_pdist2_data; 

 lambda = sym('lambda','real'); 

 %% Evaluate starting at beginning of third pinch-point.  
 
 % IR regulated
 v = vI(3);
 temp = -diff(v,lambda);
m1I_58 = subs(temp,lambda,0);
m2I_58  = -subs(diff(temp,lambda),lambda,0);


% ER regulated
 v = vE(3);
 temp = -diff(v,lambda);
m1Et = subs(temp,lambda,0);
m2Et = -subs(diff(temp,lambda),lambda,0);

% Rapid equilbirium of enhancer model
syms lambda;
f = length(Gen);
Gen_star = Gen; 
Gen_star(f,:) = zeros(1,f); 
iGen = inv(lambda*eye(f) - Gen_star);
mS = -subs(diff(lambda*iGen(1,f),lambda),lambda,0); % mean for enhancer chain 
m2S = subs(diff(diff(lambda*iGen(1,f),lambda),lambda),lambda,0); % 2nd moment for enhancer chain 
p = kba/(kab+kba); % probability of find ing the system in the final state


m1E_58  = m1Et + mS*(1-p);  % First moment of ER model
m2E_58 = m2Et + (1-p)*(2*m1Et*mS+m2S); % Second moment of ER model

% save multiloop_data; 


%%

load multiloop_data;


m1E = m1E_58;
m2E = m2E_58;
m1I = m1I_58;
m2I = m2I_58;

% Define variables
%       1    2    3  4    5  6   7  8    9   10  11  12 13  14  15  16
vars = [k12,k21,k23,k24,k32,k35,k53,k54,k42,k45,k56,k65,k67,k78,kab,kba];
% vals = [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,.1 , 1 ];

% Compute gradients
 grad_mE = jacobian(m1E,vars);
 grad_sE = jacobian(m2E-m1E^2,vars);
 grad_mI = jacobian(m1I,vars);
 grad_sI = jacobian(m2I-m1I^2,vars);
 grad_nE = jacobian((m2E-m1E^2)/m1E,vars);
 grad_nI = jacobian((m2I-m1I^2)/m1I,vars);
 
 
% % Print solutions to Text File (fast method)
 
%  fid = fopen('modelFull_solns.txt', 'wt');
% fprintf(fid, ['m1E = ', char(m1E), '\n', '  \n',...
%     'm2E = ', char(m2E), '\n', '  \n',...
%     'm1I = ', char(m1I), '\n', '  \n',...
%     'm2I = ', char(m2I), '\n', '  \n',...
%     'grad_mE = ', char(grad_mE), '\n', '  \n',...
%     'grad_mI = ', char(grad_mI), '\n', '  \n',...    
%     ]  );
% fclose(fid);

% convert solutions in symbolic expression to matlab commands with
% variables for inputs.  This is much faster than 'subs' command, sadly. 

% Print solutions in memory using strfind (much faster than 'subs' command.
solns = {char(m1E); char(m2E); char(m1I); char(m2I); ...
    char(grad_mE); char(grad_sE); char(grad_nE); char(grad_mI); char(grad_sI); char(grad_nI)};
for k =1:length(solns) 
    solns{k}(strfind(solns{k},'k'))='K';
    % remove text 'matrix' from beginning of character matrices
    try % this will only work if the statement begins with 'matrix(
    solns{k}(strfind(solns{k},'matrix'):6)='      ';
    catch
    end
%     if solns{k}(end)==')' % remove terminal parenthesis 
%          solns{k}(end)=' ';
%      end
end


% % If you don't want to run this cell again, save it's data
 save multiloop_solns;


%% Explore Parameter Space
% substitutes in N random draws.
%  


N=10000; 
P = length(vars); 
M1E = zeros(N,1); M2E = M1E; M1I = M1E; M2I = M1E; 
GmE = zeros(N,P); GsE = GmE; GnE = GmE; GmI = GmE; GsI = GmE; GnI = GmE; 
vars = zeros(N,P); 

for i=1:N
 K12 = rand; K23 = rand; K24 = rand;  K35 = rand;  K45 = rand; K53=rand; K54=rand;
 K56 = rand; K67 = rand; K78 = rand;     Kab = rand; Kba = rand;
 K21 = rand; K32 = rand; K42 = rand; K65 = rand;
 vars(i,:) = [K12,K21,K23,K24,K32,K35,K53,K54,K42,K45,K56,K65,K67,K78,Kab,Kba];
M1E(i) = eval(solns{1});  % ER model, 1st moment i.e. mean
M2E(i) = eval(solns{2});   % ER model, 2nd moment
M1I(i) = eval(solns{3}); % IR model, 1st moment
M2I(i) = eval(solns{4});  % IR model, 2nd moment
GmE(i,:) = eval(solns{5}); % Sensitivity gradients for mean transition time, ER model
GsE(i,:) = eval(solns{6}); % Sensitivity gradients for variance in transition time, ER model 
GnE(i,:) = eval(solns{7}); % Sensitivity gradients for COV transition time, ER model
GmI(i,:) = eval(solns{8});  % Sensitivity gradients for mean transition time, IR model
GsI(i,:) = eval(solns{9}); % Sensitivity gradients for variance in transition time, IR model 
GnI(i,:) = eval(solns{10});  % Sensitivity gradients for COV transition time, IR model
end

% Get rid of unused cells
M1E = nonzeros(M1E); 
M2E = nonzeros(M2E);
M1I = nonzeros(M1I);
M2I = nonzeros(M2I);


sE = M2E - M1E.^2;  % variance in transition time, ER model
sI = M2I - M1I.^2; % variance in transition time, IR model
nE = sE./M1E.^2; % 'noise'/CoV of transition time, ER model
nI = sI./M1I.^2; % 'noise'/CoV of transition time, IR model


dmv = M1I - M1E; % difference in means
dsv = sI - sE; % difference in variances
dnv = nI - nE; % difference in CoV



rmv = M1I./M1E; % ratio of means
rsv = sI./sE; % ratio of variances
rtv = (sI.^2./M1I) ./ (sE.^2./M1E); % ratio of CoVs 

save multiloop_pdata;
